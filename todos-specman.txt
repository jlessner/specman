Abschluss für Go-Live
- Suche über ganzes Modell (siehe TextFinderDialog)
  - FindReplaceAction.updateContextState korrekt implementieren
    wird aufgerufen, wenn man bei geöffnetem Dialog den Caret in einem Textfeld ändert
    ACHTUNG: wird im Moment auch aufgerufen, wenn wir im Suchdialog von einem Feld zum nächsten
      springen und im neuen Feld die Caretposition auf 0 setzen.
  - Verlorener Focus Problem: einen einfachen Schritt einfügen, dann wiederholt nach "bla" suchen.
     Jedes 2. Mal nach der Meldung, dass kein Ergebnis vorliegt, kein Fokus mehr vorhanden und durch Klicken
     in die Felder auch nicht wieder herstellbar.
  x Ersetzung ist nicht atomar, sondern besteht aus Löschen des alten Inhalts, und Einsetzen des neuen Inhalts
     sollten wir für ein schöneres Undo besser machen

- PDF-Export
  - Font-Einschränkung wieder entfernen
    Das Problem: der Sitka-Font ist nachwievor ein guter Default wegen der guten Renderingeigenschaften für UI *und* PDF.
      Wenn man in FormattedShapeText aber wieder schreibt DefaultFontProvider(true, true, true) dann ist Sitka nicht mehr
      der Defaultfont. Es gibt einen Konstruktor mit einem 4. Parameter zur Angabe der Default Font Familiy, den habe ich
      aber noch nicht zum Fliegen gebracht. Man kommt dann trotz "Sitka" als defaultFontFamily in der Methode
      FontSelector.bestMatch bei einem der anderen Fonts raus.
    Und auch im UI ist "Default" etwas anderes als der Font, den man über JEditorPane.setFont einstellt, wenn man später
      ein Stück Text markiert und explizit über das Menü auf den Default-Font umstellt, so dass im HTML steht
      <font face=\"Default\">Schritt</font> Evt. muss man hier noch an das Stylesheet von HTMLEditorKit bzw. JEditorPane
      dran.
    Beides muss also noch sauber verstanden und verheiratet werden
  - Nice to have: Seitenzahlen bei Tiling
  - Nice to have: Bulletpoints / Zahlen von Lineitems liegen nicht auf der Baseline des Lineitem-Texts
  - Nice to have: Springen über Schrittreferenzen im PDF
  x Formatauswahl: A4/A3, Querformat/Hochformat, Tiling ja/nein, Auswahl in den Benutzereinstellungen
  x Renderfehler von gutenmorgen.xsd lösen:
    x g von "Solange" bei 120% abgeschnitten
    x Gelber Hintergrund von "auf Snooze stellen" nur halb hoch
    x "Werktag" nicht zu sehen
    x "Wochentag prüfen" und "Lust auf Kaffee" rechtsbündig statt zentriert
  x Rendering von Bulletpoints und Zahlen für Listitems
  x Überschriften erscheinen nach oben versetzt
  x Text, der übermäßig viel Platz in der Höhe hat (wegen Nachbartext mit höherem Bedarf), wird am Fuß angezeigt statt am Kopf des Bereichs
  x Anpassung der Fontgrößen aus Tags wie <font size="6">
  x Abstände um eine H1 herum wachsen bei Änderung des UI-Zoomfaktors überproportional
  x Fettschrift in PDF-Texten funktioniert nicht trotz gleichem Truetype-Font in Swing und PDF
     So la la gelöst. UI morphed den regulären Font, html2pdf arbeitet mit 4 Fontfamilien (regular, bold, italic, bold+italic)
  x Korrekte Behandlung von Zoomfaktor kombiniert mit Swing-zu-PDF-Skalierung
  x Abgesetzte Darstellung
  x rechtsbündige und zentrierte Texte nicht korrekt platziert
  x Scrollposition aus der Positionierung im PDF herausrechnen
  x Seitenumbrüche
  x Texte über und unter Diagramm
  x Bilder und unterstrukturierte EditContainer (aktuell nur 1. TextEditArea)
- Neben Serif-Font auch Sans Serif und Monospace Font einbauen und alle anderen entfernen
  - Muss auch alles PDF-tauglich sein
- Darstellung von Catch-Bereichen überarbeiten
- Verfahren der Verknüpfung von Break und Catch überarbeiten / säubern
- Undo/Redo für Catch- und Breakschritte inkl. Verknüpfung
- Ordentliche Fehlermeldungsanzeige
- Permanente Aktualisierung der Birdsview oder vielleicht erst mal Birdsview rausnehmen
- Vielleicht eine kleiner Top-Inset für Schritt-Texte, um die Überschneidung mit den Labels zu verringern?
- Doku aktualisieren
- Beschriftungen internationalisieren
x Zusätzliche Ablage aller Plain Texte im Modell / auf Datei zwecks Durchsuchbarkeit aus IDEs heraus

- Tabellen als separate Elemente analog Bilder
  - Nice to have: Einfärben von Zellen (statt Schritt), wenn Fokus in Tabellenzelle steht
  - Nice to have: Springen in die nächste Zelle durch Drücken von TAB
  - Nice to have: Hinzufügen von Zeilen durch Drücken von TAB in der letzten Zelle?
  x Zurücknehmen hinzugefügter Zeilen und Spalten
  x Löschen neu hinzugefügter Zeilen und Spalten muss direkt Wirkung zeigen
  x Berücksichtigen von Änderungsmodus beim Hinzufügen / Löschen von Zeilen
  x Berücksichtigen von Änderungsmodus beim Hinzufügen / Löschen von Spalten
  x Gelöscht markierte Zeilen und Spalten dürfen keine Löschung mehr erlauben
  x Gelöscht markierte Tabelle darf kein Löschen / Hinzufügen von Zeilen / Spalten mehr erlauben
  x UndoableTableRemovedMarked
  x Berücksichtigen von Änderungsmodus beim Hinzufügen / Löschen einer Tabelle
  x Hinzufügen / Löschen von Spalten (Löschen der letzten Spalte = Löschen der Tabelle)
  x Undo / Redo für Hinzufügen / Löschen von Zeilen
  x Hinzufügen / Löschen von Zeilen (Löschen der letzten Zeile = Löschen der Tabelle)
  x Undo / Redo für Hinzufügen / Löschen von Zeilen
  x Anpassung von Spaltenbreiten

Bugs fixen
- Doppeltes Einfügen durch DraggingLogic, wenn Fokus in einer Überschrift eines Zweigs steht
- Da Änderungen im Text durch Textfarbe erkannt wird, bleiben beim Zurücknehmen von Änderungen eingefügte Zeilenumbrüche und
    HTML-Aufzählungszeichen zurück
- Ändern des Paragraphtypen lässt sich nicht zurücknehmen
- Letzter Zeilenumbruch in einem Schritt kann nicht entfernt werden
    - Problem ist, dass der Umbruch nicht entfernt werden kann, da der Offset angeblich größer als das Dokumentenende ist:
      RemoveAction.actionPerformed(e) -> HTMLUtils.removeElement()Zeile199 - Es wird erkannt, dass der Offset des zu entfernenden Elements größer ist
      als die Länge des Documents und die zu entfernende Länge auf 0 reduziert wird. Dies führt dazu, dass der Zeilenumbruch nicht entfernt wird.
      Eine Ausgabe von document.getText() mit den Offsets gibt jedoch den erwarteten Text (\n) zurück.
- Gleiches Problem wie oben, nur andere Stelle: Exception beim Zurücknehmen von Einfügungen mit Zeilenumbrüchen:
    Caused by: javax.swing.text.BadLocationException: Invalid remove
        at java.desktop/javax.swing.text.AbstractDocument.handleRemove(AbstractDocument.java:634)
        at java.desktop/javax.swing.text.AbstractDocument.remove(AbstractDocument.java:619)
        at specman.editarea.TextEditArea.removeTextAndUnregisterStepnumberLinks(TextEditArea.java:580)
        ... 44 more
- Komplettes Rewrite von DraggingLogic
- resyncSchrittnummerStil sollte nur beim Aufbau aus Modell verwendet werden. Ansonsten sollte beim (Neu-)Setzen der ID der Stil immer erhalten bleiben, abhängig von Geloescht und Quellschritt
- Fokus setzen beim Entfernen des vorletzten Schritts
- Löschen des vorletzten Zweigs erlauben
- Abfangen des Löschens des letzten Zweigs im Case
- NumberStepBackground in RoundedBorderDecorator schwarz färben wenn Schritt gelöscht ist
- 'Cannot invoke "specman.SpaltenResizer.getShape()" because "this.breitenAnpasser" is null' in PDF-Export with no diagram
x Undo/Redo-Problem in Tabellen
    Vorbereitung: Tabelle hinzufügen, Zeile hinzufügen, darin Text eintippen, Tabelle löschen
    Den gesamten Vorgang über Undos zurücknehmen - klappt alles
    Den gesamten Vorgang über Redos wieder herstellen - die Wiederherstellung des Texts klappt nicht
    Dürfte daran liegen, dass UndoableTableRowAdded im redo eine völlig neue leer Zeile hinzufügt statt die ursprüngliche
x Schriftfarbe initialer Texte ist beim Anlegen neuer Schritte nicht überall gelb
x Hellgelber Hintergrund wird beim Laden von Datei nicht überall wieder hergestellt
x Schrift ohne Änderungsmarkierung hat *weißen* Hintergrund, müsste aber *keinen* haben, damit die Hintergrundfarbe des Feldes durchscheint


Auf längere Sicht - nicht notwendig für ersten Go-Live:
- Schritt-Morphing: If/Else -> Case usw.
- Zooming aus Undo-Liste entfernen
- Kommentare
- Code auf Englisch übersetzen
- Sprache wählen
- Sonst-Zweig in Cases Entfernen / Hinzufügen
- Button-Enabling
- Spellchecker
- Mehrere Changesets
- Annehmen *einzelner* Änderungen

Tipps und Tricks
- Pixelgenauer Größenvergleich zwischen UI und PDF-Export geht mit 85,2% Zoomfaktor im Acrobat Reader
